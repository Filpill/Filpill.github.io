[{"categories":["data","programming"],"contents":"","permalink":"https://filpill.github.io/projects/outlook/","tags":["programming","data","python","outlook","automation"],"title":"Outlook - Email Automation with Python"},{"categories":["data","programming"],"contents":"","permalink":"https://filpill.github.io/projects/pptx/","tags":["programming","data","python","powerpoint","automation"],"title":"Python-Pptx - PowerPoint Generation via Python"},{"categories":["data","programming"],"contents":"","permalink":"https://filpill.github.io/projects/xlsx/","tags":["programming","data","python","excel","automation"],"title":"XlsxWriter - Excel Report Generation via Python"},{"categories":["programming"],"contents":"Summary The purpose of this page is to document the most common ways I interact with git and in maintaining my programs. These actions are performed via the command line as per how the tool was originally designed.\nIn my opinion the main benefit is the added efficiency of the scripting out the majority of the CLI commands via a series of shell scripts.\nThis simply allows you to direct all of your attention on creating better quality work without getting lost in a GUI most of the time.\nGithub Procedures Create Local Repo and Connect to Remote Repository %%{init: {'theme': 'forest', 'themeVariables': {'darkMode':'true'}}}%% graph TD; A(Go to Github and create a new repository)--\u003eB[Go to the working directory of your machine and initialise the local repo by typing: git init] B--\u003eC(Connect local repo to remote repo by typing: git remote set-url origin your_repo_ssh_address) Cloning a Github Repo %%{init: {'theme': 'forest', 'themeVariables': {'darkMode':'true'}}}%% graph TD; A(Go to Github and copy ssh address of repository)--\u003eB(Go to the directory where you want to save repo and type: git clone repo_ssh_address) Creating SSH Keys for Authentication Protocol %%{init: {'theme': 'forest', 'themeVariables': {'darkMode':'true'}}}%% graph TD; A(Go to your dot ssh directory which is storing ssh-keys)--\u003eB[\"Type this command to generate an SSH Keypair: ssh-keygen -t rsa -b 4096 -C youremail@yourdomain.com\"] B--\u003eC[\"Name your SSH keys, and skip password prompts\"] C--\u003eD(\"Copy the public key of the two that were generated and paste into the Github settings where you are saving your public keys\") Initialise SSH-Agent and Add Private SSH Key To Key Chain %%{init: {'theme': 'forest', 'themeVariables': {'darkMode':'true'}}}%% graph TD; A(\"To start ssh-agent type: eval `ssh-agent`\")--\u003eB(\"To add the private key to the ssh agent type: ssh-add (path to your private ssh key)\") Commit Changes to Github Repository %%{init: {'theme': 'forest', 'themeVariables': {'darkMode':'true'}}}%% graph TD; A(Pull the most recent version from the repo by typing: git pull origin main)--\u003eB[\"Make ammendments to your work and save it locally\"] B--\u003eC[\"To queue up ALL changes to upload, type: git add .\"] C--\u003eD[\"To commit the changes, type: git commit -m ”add some comments here”\"] D--\u003eE(\"To push the committed changes onto the main branch; type: ”git push origin main”\") ","permalink":"https://filpill.github.io/projects/github/","tags":["cli","shell","programming"],"title":"Github - Command Line Interface Procedures"},{"categories":["programming"],"contents":"Codewars Profile Filpill - Codewars Profile\nWhat is Codewars? A website that provides challenges for you to solve in a variety of programming languages. The higher the rank of the problem, the harder it is to solve.\nMotivation Recently I was feeling inspired to try and improve my existing programming skills. I am specifically focusing on improving my fundamental knoweldge of Python.\nThe majority of my learning process so far has been based on my independant project based learning. However, I do feel that some of my programming methodology is not utlising best practice. My programs can have a tendancy to be long-winded or have extremely confusing flow of logic. I do feel like I can benefit from writing simpler and more consice programs.\nI think its useful to solve some coding problems which drive you to implement solutions using data structures and algorithms you do not typically encounter on a daily basis.\nI\u0026rsquo;m slowly realising the benefit of nested data structures which is something that I would\u0026rsquo;ve avoided in the past. For example I would not typically use a structure like a list of tuples. However, in some cases its much easier to generate a solution when you are nesting the data as opposed to a utilising completely flat data structures (depending on the question of course).\nAdditionally, the practice helps me learn the standard Python libraries to a much deeper level. In the long run, I think it will be more useful to lean on the standard library as opposed to importing modules for a one-off use-case.\nThis will also be a gateway to learning more programming languages in the future.\nExample of Kata Solutions For reference, I will show an example problem I solved previously:\nKata name: Strings Mix DESCRIPTION: Given two strings s1 and s2, we want to visualize how different the two strings are. We will only take into account the lowercase letters (a to z). First let us count the frequency of each lowercase letters in s1 and s2.\ns1 = \u0026ldquo;A aaaa bb c\u0026rdquo;\ns2 = \u0026ldquo;\u0026amp; aaa bbb c d\u0026rdquo;\ns1 has 4 \u0026lsquo;a\u0026rsquo;, 2 \u0026lsquo;b\u0026rsquo;, 1 \u0026lsquo;c\u0026rsquo;\ns2 has 3 \u0026lsquo;a\u0026rsquo;, 3 \u0026lsquo;b\u0026rsquo;, 1 \u0026lsquo;c\u0026rsquo;, 1 \u0026rsquo;d\u0026rsquo;\nSo the maximum for \u0026lsquo;a\u0026rsquo; in s1 and s2 is 4 from s1; the maximum for \u0026lsquo;b\u0026rsquo; is 3 from s2. In the following we will not consider letters when the maximum of their occurrences is less than or equal to 1.\nWe can resume the differences between s1 and s2 in the following string: \u0026ldquo;1:aaaa/2:bbb\u0026rdquo; where 1 in 1:aaaa stands for string s1 and aaaa because the maximum for a is 4. In the same manner 2:bbb stands for string s2 and bbb because the maximum for b is 3.\nThe task is to produce a string in which each lowercase letters of s1 or s2 appears as many times as its maximum if this maximum is strictly greater than 1; these letters will be prefixed by the number of the string where they appear with their maximum value and :. If the maximum is in s1 as well as in s2 the prefix is =:.\nIn the result, substrings (a substring is for example 2:nnnnn or 1:hhh; it contains the prefix) will be in decreasing order of their length and when they have the same length sorted in ascending lexicographic order (letters and digits - more precisely sorted by codepoint); the different groups will be separated by \u0026lsquo;/\u0026rsquo;.\n#Count chars and return list of tuples def count_char(string_list): #Pulling only lower case letters from strings string1 = string_list[0][1] string2 = string_list[1][1] s1_chars = \u0026#39;\u0026#39;.join(char for char in list(set(string1)) if char.isalnum() and char.islower()) s2_chars = \u0026#39;\u0026#39;.join(char for char in list(set(string2)) if char.isalnum() and char.islower()) chars = s1_chars + s2_chars chars = list(set(chars)) char_count_list = [] #Counting characters in each string for char in chars: count1 = string1.count(char) count2 = string2.count(char) if count1 \u0026gt; 1 or count2 \u0026gt; 1:char_count_list.append((char,count1,count2)) return char_count_list #Take list of tuples and return list of string repeated by occurrence def char_iter(tuple_consol): chars=f\u0026#39;\u0026#39; chars_form_list = [] for tuple in tuple_consol: chars = f\u0026#39;{tuple[2]}:\u0026#39; for i in range(tuple[1]): chars = f\u0026#39;{chars}{tuple[0]}\u0026#39; chars_form_list.append(chars) chars=f\u0026#39;\u0026#39; return chars_form_list def ascii_concat(chars_form_list): ascii_list = [] for item in chars_form_list: asc_val = \u0026#39;\u0026#39; #reset concat for char in item: ascii = str(ord(char)) if len(ascii) == 2: ascii = \u0026#39;0\u0026#39; + ascii asc_val = asc_val + ascii ascii_list.append(int(asc_val)) return ascii_list def mix(s1, s2): #List of string, labeled with 1 and 2 string_list = [(1,s1),(2,s2)] #Counting ordered characters through function for each string and return list of tuples char_count_list = count_char(string_list) #Consolidate list by finding max count in respective string tuple_consol = [] for tuple in char_count_list: char_count1 = tuple[1] char_count2 = tuple[2] if char_count1 \u0026gt; char_count2: tuple_consol.append((tuple[0],char_count1,\u0026#39;1\u0026#39;)) elif char_count1 \u0026lt; char_count2: tuple_consol.append((tuple[0],char_count2,\u0026#39;2\u0026#39;)) elif char_count1 == char_count2: tuple_consol.append((tuple[0],char_count1,\u0026#39;=\u0026#39;)) #Returing formatted list of string iterated by char count and sorting by length chars_form_list = char_iter(tuple_consol) #Concat up all the ascii\u0026#39;s in the respective strings ascii_list = ascii_concat(chars_form_list) #Combine the lists together into list of tuples and sort by ascii value ascii_tuples = [] for i in range(len(ascii_list)): ascii_tuples.append((chars_form_list[i],ascii_list[i])) ascii_tuples = sorted(ascii_tuples,key=lambda i:i[1],reverse=True) #Need to create a list of lists. #Each sublist will contain strings of the same length. sub_slices = [] prev_idx = 0 for i in range(len(ascii_tuples)-1): tuple1 = ascii_tuples[i][0] tuple2 = ascii_tuples[i+1][0] if len(tuple1) != len(tuple2): sub_slices.append(ascii_tuples[prev_idx:i+1]) prev_idx = i+1 elif len(tuple1) == len(tuple2) and i == (len(ascii_tuples)-2): sub_slices.append(ascii_tuples[prev_idx:i+2]) #Sorting each sublist into lexigraphical order (low to high) and append to result result = \u0026#39;\u0026#39; for sublist in sub_slices: sublist = sorted(sublist,key=lambda i:i[1]) for tuple in sublist: string = tuple[0] result = result + string + \u0026#39;/\u0026#39; result = result[:-1] #tidy up trailing string return result ","permalink":"https://filpill.github.io/projects/codewars/","tags":["python","sql","programming","coding","data-structures","algorithms"],"title":"Codewars - Solving Coding Problems"},{"categories":["data"],"contents":"Summary I was searching for a Valorant API to collect and analyse some of my own match data. However the developers are not providing personal API keys for this particular game.\nThere are some websites which are publishing the Valorant data into the public domain. I decided to scrape my own match data which is being hosted on their web clients.\nThough the volume of data highlighted on the website is limited compared to the actual volume of games I\u0026rsquo;ve played. I was only able to pull 30 matches worth of data.\nHowever, it was worth learning about the overall web-scraping process and adding more capabilities to my toolkit.\nScrapy - Web Scraper I used a python library called scrapy as my web-crawling tool and the website being interrogated was https://dak.gg/valorant/en/profile/FilPill-EUW\nInitialising Scrapy Project The command below creates all the starting files for building the web-crawler:\nscrapy startproject val_scraper Checking for 200 Response on Target Website I initialised a scrapy shell with the command:\nscrapy shell Inside the shell, I make a request to the website to check that my scraper has permissions to scrape the website.\nfetch (\u0026#39;https://dak.gg/valorant/en/profile/FilPill-EUW](https://dak.gg/valorant/en/profile/FilPill-EUW)a\u0026#39;) A successful connection will return a 200 response, otherwise any 4xx reponse code will inidicate an error or a lack of permissions to perform this specific operation.\nIdentifying Target For Scraping My initial approach involved attempting to parse out the HTML classes within the div\u0026rsquo;s however it did not work successfully. Despite the data being kept inside the HTML tags,I could not access them with my scraper.\nWhen I simulated the webscraper opening the website, it did not return any data at all. Just an empty HTML page with no data. Soonafter, I realised that javascript is being employed to dynamically load the data into the front-end.\nRealising this occurrence, I changed my approach. On the inspect elements page, I naviagted to the XHR/Fetch network tab to view what kind of requests were being made to the website, I found an https request which returns my match data in JSON format.\nThe spider script shown below is what is being ustilised to scrape the match data from the page:\nimport scrapy import json class PlayerState(scrapy.Spider): name = \u0026#39;playerState\u0026#39; start_urls = [\u0026#39;https://dak.gg/valorant/en/profile/FilPill-EUW\u0026#39;] headers = { \u0026#34;accept\u0026#34;:\u0026#34; application/json, text/plain, */*\u0026#34; } def parse(self, response): url = \u0026#39;https://val.dakgg.io/api/v1/accounts/JPnyLxsiavseiYbL8xtmWSuFRHdupX43u_hVynD5YScr2_Y32Wt2v5K-NvxvfDRWTL67AHdVSmoLTg/matches\u0026#39; request = scrapy.Request(url, callback = self.parse_api, headers=self.headers) yield request def parse_api(self,response): raw_data = response.body data = json.loads(raw_data) yield { \u0026#39;matches\u0026#39;:data[\u0026#39;matches\u0026#39;] } Running the spider To run the spider you run the following command:\nscrapy crawl playerState -O playerState.json The playerState argument in the command is referring to the class defined in my spider.\nThe results are saved in a json file of my choosing.\nData Analysis Since we are only pulling out 30 matches, we are fairly limited in generating valuable data visualisations.\nHowever the goal was mainly to gain an understanding of the overall webscraping process.\nThese are some of the visualisations made using python:\n","permalink":"https://filpill.github.io/projects/val_scrp/","tags":["scrapy","json","webscraping","programming"],"title":"Web Scraper - Valorant Data Analysis"},{"categories":["design"],"contents":"Summary I wanted to showcase my projects without devoting a large amount of time to maintaining HTML code and needed a framework to make it easy to share my projects.\nHugo is a static site generator written in Go and compiles your documents written in markdown into cleanly formatted HTML and CSS files.\nThe first iteration of my website was manually written in HTML/CSS. It was a little bit ugly compared to the second iteration which is using hugo framework. Additionally, using someone else\u0026rsquo;s theme takes alot of the legwork out of the page design.\nThe compiled HTML files are hosted on my github pages for reference.\nProcess Here is some general guidance as to how this website was developed from a Linux OS perspective. The guidance should be adapted according to the OS being used:\nGithub Repositories To build and deploy the website, we require two seperate repositories:\nA production repo blog-web: with markup documents and web config. A deployment repo Filpill.github.io: with compiled static HTML files. Content is added to the markdown documents in the production repo. This is later compiled into static HTML.\nThe static files reside in the public folder. They are eventually pushed into the deployment repo.\nThe deployment repository exists so we can allow github to display the HTML files.\nInstalling Hugo I\u0026rsquo;m working from an Arch based Linux OS at the time of development. Installing the hugo on arch can be done with the following pacman command: sudo pacman -S hugo Creating New Website Initialise Website Folders To initialise a new website type the following command into your shell: hugo new site name_of_your_website This will create all the folder templates you need to get started. Website Theme There are a couple of approaches to this, you can either design your own theme or you can choose one that is publicly shared. I chose to use a repository containing a theme called PaperMod which is a minimalistic theme which fits my requirements. cd into your themes directory and clone the repository at that location. I\u0026rsquo;m choosing to use the SSH method to clone into it, however you can also use HTTPS method if you prefer: git clone git@github.com:adityatelange/hugo-PaperMod.git Configuration File The configuration document is in the root directory and is called config.toml This file configures various aspects of your website. How to make a webpage Hugo\u0026rsquo;s webpages reside in the content folder of your website.\ncd to the root of your website To make a new page type: (replace the page_folder and page_name with names of your choice) hugo new page_folder/page_name.md The name of the page and directory automatically form links for your website A new markdown file with a default template will appear for your page. Using markdown, you can populate the file with your webpage content. Images Images are stored in one of two directories. Either the static or assets folder:\nThe static folder exists if you wish to directly use your image in their original state via markdown. You may wish to optimise the image by scaling down the resolution or compressing the image, and this will only be the case if you call the image in the assets folder. You can make some HTML shortcodes to standardise the optimisation you want to apply to the image. Technically .gif files are not optimal inclusions into minimal websites due to the large file size. Although I like the visual presentation they provide. Compiling on Local Server Observing the compiled version of the (draft) website is simple, type the following command:\nhugo server -D Adding the -D argument at the end also compiles the documents with the draft status set to true. Omitting the -D at the end of the command will not render documents in draft state. The local website host is at this address: http://localhost:1313/ Adding a Submodule A git submodule is a record within that points to a specific commit in another directory.\nThis is a key component of this workflow as we want to send the contents of our public folder and point it to an external repo where we are hosting.\nIn our case want our deployment repo Filpill.github.io to be a submodule of the projects repo.\nTherefore we want to cd into the root folder of our projects website (blog-web) and type:\ngit submodule add -b main git@github.com:Filpill/Filpill.github.io.git public And this enables us build from blog-web and to push code from the public folder of blog-web straight to Filpill.github.io\nCompiling Static Files into Public Folder In order to compile the files nessesary for the deployment repository on git. Type the following command in the root directory of website:\nhugo -t hugo-PaperMod -D The argument after \u0026ldquo;-t\u0026rdquo; is theme which is being used to compile the website together. In my case I\u0026rsquo;m using hugo-PaperMod. The resulting files will compile straight into the public folder. Again similarly to the local host, adding a \u0026ldquo;-D\u0026rdquo; will transform draft pages as well as the finalised pages. You can choose to omit the \u0026ldquo;-D\u0026rdquo; when you are finalising the website. But you must change the draft state in the markdown pages. Deploying pages onto your Github Since all the static files are compiled in public and we have that folder pointing towards the deployment repo. We can just write our git commands to push the changes into deployment.\ncd public/ git add . git commit -m \u0026#34;deploying compiled html\u0026#34; git push origin main At this stage we have website up and running and hosted on github. Adding new content to the website is easily achieved with new markdown files. And changes are pushed with the previous 2 steps. Or we could script this out completely with a shell script.\n","permalink":"https://filpill.github.io/projects/hugo/","tags":["html","css","markdown","go","website","javascript","shell","vim","scripting"],"title":"Front-end Design - Static Site Generator"},{"categories":null,"contents":"About Me Aeronuatical engineer graduate Self-taught programmer in web-dev/data/engineering Developing data analytics/science skills Currently studying machine learning and AI Highly knowledgable in airline safety domain Hobbyist Glider Pilot Hobbyist 3D Print Designer Work Experience Link to my CV on github Projects Refer to the projects tab for short discussions and displays of my resulting work. Refer to my respective github repo\u0026rsquo;s for the project files. Github Github profile - Filpill Livancic LinkedIn LinkedIn profile - Filip Livancic ","permalink":"https://filpill.github.io/profile/","tags":["html","css","hugo","web"],"title":"Profile"},{"categories":["data"],"contents":"Summary I decided to showcase some data transformations on I game that usually play and see if I could get some cool visualisations/insights. I\u0026rsquo;m using an API to replicate a sample of data visualisations I would typically make. In my work I normally query out of a SQL database for my data ingestion but trying something new here as an experiment. This was my first time using an API to extract JSON data, but its very easy to manipulate on Python to transform into a dict/dataframe. AoE2 Data Project: Repository Link on my Github\nData Visualisations ","permalink":"https://filpill.github.io/projects/aoe2/","tags":["programming","python","api","data","visualisation","dashboard","analytics"],"title":"Age of Empire 2 API - Data Visualisation"},{"categories":["engineering","design"],"contents":"Summary Designed a 3D printed lithophane lamp in Soldworks. Main feature: Replaceable lithophanes of chosen standard of aspect ratio/dimension. Features Top/Bottom Panels retained with three M3 screws \u0026ndash; Removing the panels gives access to replacing the printed lithophane. Wiring threads through back of assembly and socket leans on back the back panel. Forward attachment clamps the socket and constrains the foward movement of the light socket with screws. I have two slightly different designs to accomadate either an E14 lamp socket or an E27 lamp socket. This was due to supply issues of light sockets at the time of design which prompted a redesign due to time constraints. Printing and Design Images are preprocessed to correct specs and lithophane stl\u0026rsquo;s are generated using: https://itslitho.com\u0026quot; Lithophane thickness paramaters: smallest wall thickness 0.9mm largest wall thickness is 3mm border thickness: 5.25mm Printed on Creality Ender 3 pro: 0.4mm nozzle Total print time is 26 hours (my printer set-up) Animation The version shown below in the pictures is the E14 litho lamp: Max Width = 185mm Height = 130mm ","permalink":"https://filpill.github.io/projects/litho/","tags":["lithophane","3d-printing","design","engineering","photoshop"],"title":"Lithophane Lamp"},{"categories":["engineering","design"],"contents":"Summary Personal project to design and build a 3D printed car from scratch. Project status is currently dormant as I haven\u0026rsquo;t had time to iterate over the design due to the complexity and required time investment. The project was gradually being built over the course of 2020 and 2021. Though incomplete, I may return to this project at a later stage (with a smaller scope) after finishing some other projects. The project requires some simplification for the desired goal of having a robust car design. I will share the existing highlights of this projects for the time being. Link to Project\nSolidworks Design Side View Back View Isometric View Programming Processing3 Controller Program - Bluetooth Interface import processing.serial.*; import controlP5.*; Serial myPort; ControlP5 cp5; //Initialising Global Variables int Motor_Speed = 0; int Steering = 0; int Forward = 0; int Backward = 0; String angleStatus; void setup() { //Inserting Controller Buttons and Sliders size(450,500); cp5 = new ControlP5(this); cp5.addSlider(\u0026#34;Steering\u0026#34;).setPosition(50,150). setSize(200, 100). setRange(0,255); cp5.addSlider(\u0026#34;Motor_Speed\u0026#34;).setPosition(50,275). setSize(175, 100). setRange(0,205); cp5.addButton(\u0026#34;Forward\u0026#34;).setValue(205).setPosition(300,150).setSize(100,100); cp5.addButton(\u0026#34;Backward\u0026#34;).setValue(205).setPosition(300,275).setSize(100,100); //Initialising Bluetooth Communication myPort = new Serial(this, \u0026#34;COM3\u0026#34;, 9600); // Starts the serial communication at 9600 baud rate myPort.bufferUntil(\u0026#39;\\n\u0026#39;);// Reading Serial Data up to new line. The character \u0026#39;\\n\u0026#39; or \u0026#39;New Line\u0026#39; } void serialEvent (Serial myPort){// Checks for available data in the Serial Port angleStatus = myPort.readStringUntil(\u0026#39;\\n\u0026#39;);//Reads the data sent from the Arduino } void draw (){ //Drawing Title and Backround of Controller background(20,150,200); fill(120,170,220); rect(10,10,425,50); fill(0); textSize(23); text(\u0026#34;RC Car Bluetooth Controller Interface\u0026#34;,15,45); //Defining RC Car Parameters 000-000-0 //000-xxx-x = Steering //xxx-000-x = Motor Speed //xxx-xxx-0 = Motor ON/OFF //String needs to be defined inside the draw function to keep updating strings String sfSteering = nf(Steering,3); //3-digit steering value String sfMotor_Speed = nf(Motor_Speed,3); //3-digit motor-speed value if(mousePressed\u0026amp;\u0026amp; mouseX\u0026gt;300 \u0026amp;\u0026amp; mouseX\u0026lt;400 \u0026amp;\u0026amp; mouseY\u0026gt;150 \u0026amp;\u0026amp; mouseY\u0026lt;250){ println(\u0026#39;\u0026lt;\u0026#39;+sfSteering + sfMotor_Speed + \u0026#34;1\u0026#34;+\u0026#39;\u0026gt;\u0026#39;); myPort.write(\u0026#39;\u0026lt;\u0026#39;+sfSteering + sfMotor_Speed + \u0026#34;1\u0026#34;+\u0026#39;\u0026gt;\u0026#39;); delay(100);} //Send Go FWD String to Arduino else if(mousePressed\u0026amp;\u0026amp; mouseX\u0026gt;300 \u0026amp;\u0026amp; mouseX\u0026lt;400 \u0026amp;\u0026amp; mouseY\u0026gt;275 \u0026amp;\u0026amp; mouseY\u0026lt;375){ println(\u0026#39;\u0026lt;\u0026#39;+sfSteering + sfMotor_Speed + \u0026#34;2\u0026#34;+\u0026#39;\u0026gt;\u0026#39;); myPort.write(\u0026#39;\u0026lt;\u0026#39;+sfSteering + sfMotor_Speed + \u0026#34;2\u0026#34;+\u0026#39;\u0026gt;\u0026#39;); delay(100);} //Send Go BCK String to Arduino else{ println(\u0026#39;\u0026lt;\u0026#39;+sfSteering + sfMotor_Speed + \u0026#34;0\u0026#34;+\u0026#39;\u0026gt;\u0026#39;); myPort.write(\u0026#39;\u0026lt;\u0026#39;+sfSteering + sfMotor_Speed + \u0026#34;0\u0026#34;+\u0026#39;\u0026gt;\u0026#39;); delay(100);} //Send STOP String to Arduino } Arduino Control Loop #include \u0026lt;Servo.h\u0026gt; //for reading characters in const byte numChars = 32; char receivedChars[numChars]; boolean newData = false; //Inititalise Servo Servo myServo; //Define Motor H-Bridge Parameters int In1 = 7; int In2 = 8; int ENA = 5; //Define variables for incoming bluetooth data long tmr; int flag = 0; String RCSteer; String RCMotorSpeed; String Motor_Polarity; int RCSteer_Int ; int RCMotorSpeed_Int; int Motor_Polarity_Int; int angle; char c; void setup() { //Inialise Servo Data Pin myServo.attach(3); //Initialise H-Bridge Pins Data Output pinMode (In1, OUTPUT); pinMode (In2, OUTPUT); pinMode (ENA, OUTPUT); //Initialise Bluetooth Serial communication + Serial Interupt Signal Serial.begin(9600); delay(100); } void loop() { //Read Strings into Arduino recvWithStartEndMarkers(); showNewData(); //Convert Character Array to String Object String RCString = receivedChars; //Extract Control Components RCSteer = RCString.substring(0, 3); RCMotorSpeed = RCString.substring(3, 6); Motor_Polarity = RCString.substring(6, 7); //Convert Strings to Integers RCSteer_Int = RCSteer.toInt(); RCMotorSpeed_Int = RCMotorSpeed.toInt(); Motor_Polarity_Int = Motor_Polarity.toInt(); //Print data to Serial Monitor Serial.print(\u0026#34;RCcode: \u0026#34;); Serial.print(receivedChars); Serial.print(\u0026#34; Steering Value: \u0026#34;); Serial.print(RCSteer_Int); Serial.print(\u0026#34; ANGLE: \u0026#34;); Serial.print(angle); Serial.print(\u0026#34; Speed Value: \u0026#34;); Serial.print(RCMotorSpeed_Int); Serial.print(\u0026#34; Polarity Value: \u0026#34;); Serial.println(Motor_Polarity_Int); //Calling Steer and MotorControl Functions Steer(RCSteer_Int); MotorControl(Motor_Polarity_Int,RCMotorSpeed_Int); } void Steer(int RCSteer_Int){ //Send Steering Data to Servo angle = map(RCSteer_Int, 0, 255, 0, 180); myServo.write(angle); } void MotorControl(int Motor_Polarity_Int, int RCMotorSpeed_Int){ //Motor Logic switch(Motor_Polarity_Int){ // FORWARDS case 1: analogWrite(ENA, RCMotorSpeed_Int); digitalWrite(In1, HIGH); digitalWrite(In2, LOW); break; // BACKWARDS case 2: analogWrite(ENA, RCMotorSpeed_Int); digitalWrite(In1, LOW); digitalWrite(In2, HIGH); break; // STOP case 0: digitalWrite(In1, LOW); digitalWrite(In2, LOW); break; } } void recvWithStartEndMarkers() { static boolean recvInProgress = false; static byte ndx = 0; char startMarker = \u0026#39;\u0026lt;\u0026#39;; char endMarker = \u0026#39;\u0026gt;\u0026#39;; char rc; while (Serial.available() \u0026gt; 0 \u0026amp;\u0026amp; newData == false) { rc = Serial.read(); if (recvInProgress == true) { if (rc != endMarker) { receivedChars[ndx] = rc; ndx++; if (ndx \u0026gt;= numChars) { ndx = numChars - 1; } } else { receivedChars[ndx] = \u0026#39;\\0\u0026#39;; // terminate the string recvInProgress = false; ndx = 0; newData = true; } } else if (rc == startMarker) { recvInProgress = true; } } } void showNewData() { if (newData == true ){ newData = false; } } ","permalink":"https://filpill.github.io/projects/3dcar/","tags":["design","engineering","mechanical","automotive","bluetooth","processing3","3d-printing","programming","mechatronics"],"title":"3D Printed Car - Bluetooth Controller Interface"},{"categories":["engineering"],"contents":"Summary Re-writing 2D heat transfer simulation designed in MATLAB to Python. Solved using Successive Over Relaxation Algorithm and Finite Difference Method used to capture incremental changes of temeperature on grid. Animated the heat transitions in Python at each timestep using FuncAnimation component of matplotlib. LHS boundaries on the mesh and the application of the heat input on the leftmost nodes. Heat Input lasts 2 seconds in resulting simulation before being turned off. ","permalink":"https://filpill.github.io/projects/ht_sim/","tags":["python","matlab","thermodynamics","simulation","programming"],"title":"2D Heat Transfer Simulation"},{"categories":["engineering","design"],"contents":"Summary My elected project for my 4th year in University was to design and build a UAV aircraft. The design requirements were driven out from the 2017 BMFA competition (Payload Challenge). The design had to be capable of flying some circuits with varying volumes of water weighing up to 3.5kg. As project engineer, I was responsible for coordinating the technical requirements and outputs between our sub-teams. Link to Project Report Aircraft Design Process The aircraft design process used in this project is an adaptation of the design process learnt in university for commercial passenger aircraft design. The design tools and flight mechanic equations developed previously have been repurposed such to fit the requirements for a UAV application.\nTo narrow the focus of our design point, data is collected on other aircraft configurations focused around payload missions. This data collection and market analysis process is a critical element to estimating the conceptual aircraft size and Maximum Take-off Weight (MTOW).\nThe design feasibility relies on estimating a relatively sensible MTOW. It is expected that early MTOW estimates may vary ±20% from the final result, however it is sufficient as a starting point.\nThe entire design process is cyclic and interdependant on other design elements, for example: adjustments in aerodynamic configuration may require a re-assessment of the centre of gravity positioning. There are hundreds of other situtations were systems are interconnected and require engineering attention.\nBeyond the conceptual design, we are relying on emulating design practices within the aircraft model building community in order to achieve a mechnical design that does not add any unecessary weight.\nWe have elected to stick with a highly conventional configuration which has been tried and tested. The materials involved are mixture between balsawood, plywood and carbon fibre. This list of materials provide a good stength to weight ratio for the mission we are designing for.\nAreas of the aircaft which experience high loading (e.g. landing gear, wing root etc.) have been reinforced with plywood and less stressed areas are built with the less dense materials such as balsa to maintain a low overall empty weight.\nConceptual Design Phase Detailed Design Phase Aircraft Market Analysis Aircraft CAD Concept Design Derive Flight Equations Preliminary CAD Design Select Appropriate Design Point Solidworks Final CAD Estimate MTOW and OWE Early Prototyping and Testing Decide on Aircraft Configuration Design Revisions and Improvement Aircraft Centre of Gravity Estimation Final Manufacturing Output Aerofoil Comparision and Selection Electronic Systems Integration Flight Dynamics Analysis Systems Validation and Testing Material Selection Wind Tunnel Testing Preliminary Structural Analysis Flight Test Solidworks Design Exploded View Standard water bottle storing main payload in fuselage. Supplemented with custom polypropylene wing tanks. Drawing of UAV Assembly (Final Iteration) Conventional aircraft structure with carbon fiber boom connecting tailplane to the fuselage. Manufacturing Early Construction of Aircraft Constructed with sheets of lasercut balsa and plywood jigsawed together into an assembly. Finalised Construction of Aircraft This is the final assembly of the aircraft after gluing/ironing on the skin. Testing Structural Validation Test - Wing Loading Emulated elliptical wind loading distribution on test spar element Spar failure at 8kg of wing loading. Simulating Maximum Wing Loading on Spar Flight Control Testing Installing servos for ailerons and flaps; testing the control mechanisms. Flight test to validate aircraft design and measure flight performance. Flaps and Ailerons Flight Test Pitch Control ","permalink":"https://filpill.github.io/projects/uav/","tags":["design","engineering","uav","aircraft","aerodynamics","flight-dynamics","electronics","propulsion","solidworks","MATLAB"],"title":"UAV Aircraft Design"},{"categories":["engineering","design"],"contents":"Summary My 3rd year project in University was to design a Forward Facing Step and perform wind tunnel experiments to analyse flow characteristics on that geometry using PIV.\nParticle Image Velocimetry is a practical tool for Aerodynamics analyse flow fields without intrusions in the wind tunnel environment such as sensors or pitot probes.\nIn this experiment the height of the boundary layer is similarly proportioned to the height of the step. In results shown below you will notice two distinct separation regions on the aerofoil. One at the bottom of the step due to the sudden adverse pressure gradient. And another at the top of the step as the flow is unable to sharply turn the corner.\nLink to dissertation\nExperimental Procedure Wind Tunnel Experiment The experimental procedure involves diffusing small oil droplets into the freestream flow and having a sheet of laser light illuminating a cross-section of the airflow. Hundreds of images are caputured in the process a high speed camera. Due to the limited field of vision, the results from the top and bottom of the step were recorded seperately. Image Post-Processing Images need some further preparation to enable reliable PIV results. Usually this involves enhancing contrast of the images to make the particles visible. Additionally any background noise picked up by the camera needs to be subtracted from the image as we want to isolate the airflow as much as possible. OpenPIV and Python Post-Process Scripts Particle displacements on the images can be determined by performing a cross-corrleation on the series of image pairs. In my case, I used OpenPIV software written in Python to extract all the velocity fields at all the times steps recorded. Additionally, I\u0026rsquo;ve written some post-processing scripts for the velocity data text files in Python to animate experimental results. (I used MATLAB equivalents for my dissertation at the time of the project). Experimental Arangement Illustration of camera and laser positioning to capture wind tunnel data. Raw wind tunnel image with imageJ enhancements - Capturing illuminated particles moving over step within laser plane. Particle Image Velocimetry Results Instantaneous Velocity Streamplot Front Step Top Step Time Averaged Velocity Contours Front Step Top Step Turbulence Intensity Contours Front Step Top Step ","permalink":"https://filpill.github.io/projects/piv/","tags":["design","engineering","laser","camera","imageJ","matlab","python","wind tunnel","aerodynamics"],"title":"Forward Facing Step - Particle Image Velocimetry"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","permalink":"https://filpill.github.io/search/","tags":null,"title":"Search Results"}]